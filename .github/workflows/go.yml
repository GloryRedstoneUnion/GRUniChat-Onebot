# GitHub Actions Workflow for GRUniChat-OneBot Adapter
name: Build and Release

on:
  push:
    tags: [ 'v*' ]          # 当推送以v开头的标签时触发发布
  pull_request:
    branches: [ "main" ]    # PR到main分支时触发构建测试

jobs:
  # 构建测试 Job
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: stable

    - name: Download dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  # 发布 Job
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: stable

    - name: Download dependencies
      run: go mod download

    - name: Set version info
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "BUILDTIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Create dist directory
      run: mkdir -p dist

    - name: Build for multiple platforms
      run: |
        # Windows builds
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-windows-arm64.exe .
        
        # Linux builds
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-linux-arm64 .
        GOOS=linux GOARCH=386 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-linux-386 .
        GOOS=linux GOARCH=arm go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-linux-arm .
        
        # macOS builds
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-darwin-arm64 .
        
        # FreeBSD builds
        GOOS=freebsd GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-freebsd-amd64 .
        GOOS=freebsd GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILDTIME" -o dist/GRUniChat-OneBot-Adapter-$VERSION-freebsd-arm64 .

    - name: Get release notes
      id: release_notes
      run: |
        if [ -f ".github/release/releasenote.md" ]; then
          echo "notes_file=.github/release/releasenote.md" >> $GITHUB_OUTPUT
        else
          # 如果没有发布说明文件，使用Git标签注释或默认文本
          TAG_ANNOTATION=$(git tag -l --format='%(contents)' $VERSION)
          if [ -n "$TAG_ANNOTATION" ]; then
            echo "$TAG_ANNOTATION" > temp_release_notes.md
            echo "notes_file=temp_release_notes.md" >> $GITHUB_OUTPUT
          else
            cat > temp_release_notes.md << 'EOF'
        GRUniChat-OneBot Adapter $(echo $VERSION)
        
        ## 🎉 新版本发布
        
        这是 GRUniChat-OneBot 适配器的新版本。
        
        ### 📦 下载
        
        请选择适合您系统的版本进行下载：
        
        | 平台 | 架构 | 文件名 |
        |------|------|--------|
        | Windows | x64 | GRUniChat-OneBot-Adapter-*-windows-amd64.exe |
        | Windows | ARM64 | GRUniChat-OneBot-Adapter-*-windows-arm64.exe |
        | Linux | x64 | GRUniChat-OneBot-Adapter-*-linux-amd64 |
        | Linux | ARM64 | GRUniChat-OneBot-Adapter-*-linux-arm64 |
        | macOS | Intel | GRUniChat-OneBot-Adapter-*-darwin-amd64 |
        | macOS | Apple Silicon | GRUniChat-OneBot-Adapter-*-darwin-arm64 |
        
        ### 🚀 快速开始
        
        1. 下载适合您系统的可执行文件
        2. 首次运行程序，自动生成配置文件 `config.yaml`
        3. 根据您的环境修改配置文件
        4. 再次运行程序即可开始使用
        
        详细使用说明请参考项目 README.md。
        EOF
            echo "notes_file=temp_release_notes.md" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        token: ${{ secrets.GITHUB_TOKEN }}
